version: "3.9"

services:
  redis:
    image: redis:alpine
    container_name: redis
    hostname: redis
    volumes:
      - "./data/redis:/data"
    expose:
      - 6379
  server:
    container_name: server
    build: .
    environment:
      - MODEL_DIR=/data/models
      - RQ_QUEUE_NAME=default
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - 9090:9090
    depends_on:
      - redis
    links:
      - redis
    volumes:
      - "./data/server:/data"
      - "./logs:/tmp"

  tfserving:
    image: tensorflow/serving
    container_name: crtx-tensorflow-serving
    volumes:
      - "./models/:/label-studio/models/"
    environment:
      VIRTUAL_PORT: 8501
      VIRTUAL_HOST: ${DOMAIN_TENSORFLOW_SERVING}
#    ports:
#      - 8501:8501
    command:
      --model_config_file="/label-studio/models/modelconfig.config"
    networks:
      - internal-network
      - proxy

  label-studio:
    image: heartexlabs/label-studio:1.2.0
    container_name: crtx-label-studio
    volumes:
      - "./data:/label-studio/data"
      - "./conf:/label-studio/conf"
      - "./models:/label-studio/models"
      - "./src:/label-studio/src"
    ports:
      - 8080:8080
    restart: always
    environment:
      - LABEL_STUDIO_LOCAL_FILES_SERVING_ENABLED=true
      - LABEL_STUDIO_LOCAL_FILES_DOCUMENT_ROOT=/label-studio/data
      - LS_PROJECT_NAME="crtx"
      - LS_USERNAME=${LS_USERNAME}
      - LS_PASSWORD=${LS_PASSWORD}
      - LS_TOKEN=${LS_TOKEN}
      - LS_PORT=${LS_PORT}
      - LS_HOST=${LS_HOST}
    command: label-studio start --username ${LS_USERNAME} --password ${LS_PASSWORD} --user-token ${LS_TOKEN}
    networks:
      - internal-network
      - proxy

  python:
    container_name: crtx-python
    build: .
    volumes:
      - "./data:/label-studio/data"
      - "./conf:/label-studio/conf"
      - "./models:/label-studio/models"
      - "./src:/label-studio/src"
    restart: always
    environment:
      - VIRTUAL_PORT=5000
      - VIRTUAL_HOST=${LS_HOST}
      - LS_USERNAME=${LS_USERNAME}
      - LS_PASSWORD=${LS_PASSWORD}
      - LS_TOKEN=${LS_TOKEN}
      - LS_PORT=${LS_PORT}
      - LS_HOST=${LS_HOST}

    command: python3 /label-studio/src/wakeup/dataset_initial_config.py
    networks:
      - internal-network

    #command: label-studio-ml init crtx_backend --script /label-studio/src/model/ls_ml_backend.py
#    networks:
#      - internal-network
#
#
networks:
  internal-network:
    driver: bridge
  proxy:
    external:
      name: webproxy
# This only works with label-studio:0.9.1.post1
# docker run --rm -it -v $(pwd)/crtx:/label-studio/crtx -v $(pwd)/data:/label-studio/data -v $(pwd)/conf:/label-studio/conf --name label-studio heartexlabs/label-studio:latest label-studio init crtx --force --input-path=/label-studio/data/deepfashion/Sheer_Pleated-Front_Blouse --label-config=/label-studio/conf/crtx_config.xml --input-format=image-dir --allow-serving-local-files
# docker run --rm -it -p 8080:8080 -v $(pwd)/crtx:/label-studio/crtx -v $(pwd)/data:/label-studio/data -v $(pwd)/conf:/label-studio/conf --name label-studio heartexlabs/label-studio:latest label-studio start ./crtx

# start crtx --username ricardo.carrillo@fu-berlin.de --password crtx2021"
#--input-path=/label-studio/files --input-format json --label-config=/label-studio/files/crtx_config.xml --allow-serving-local-files"
